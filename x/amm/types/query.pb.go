// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frogchain/amm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPoolRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolRequest) Reset()         { *m = QueryGetPoolRequest{} }
func (m *QueryGetPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolRequest) ProtoMessage()    {}
func (*QueryGetPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{2}
}
func (m *QueryGetPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolRequest.Merge(m, src)
}
func (m *QueryGetPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolRequest proto.InternalMessageInfo

func (m *QueryGetPoolRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolResponse struct {
	Pool Pool `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool"`
}

func (m *QueryGetPoolResponse) Reset()         { *m = QueryGetPoolResponse{} }
func (m *QueryGetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolResponse) ProtoMessage()    {}
func (*QueryGetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{3}
}
func (m *QueryGetPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolResponse.Merge(m, src)
}
func (m *QueryGetPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolResponse proto.InternalMessageInfo

func (m *QueryGetPoolResponse) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

type QueryAllPoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolRequest) Reset()         { *m = QueryAllPoolRequest{} }
func (m *QueryAllPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolRequest) ProtoMessage()    {}
func (*QueryAllPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{4}
}
func (m *QueryAllPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolRequest.Merge(m, src)
}
func (m *QueryAllPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolRequest proto.InternalMessageInfo

func (m *QueryAllPoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolResponse struct {
	Pool       []Pool              `protobuf:"bytes,1,rep,name=Pool,proto3" json:"Pool"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolResponse) Reset()         { *m = QueryAllPoolResponse{} }
func (m *QueryAllPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolResponse) ProtoMessage()    {}
func (*QueryAllPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{5}
}
func (m *QueryAllPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolResponse.Merge(m, src)
}
func (m *QueryAllPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolResponse proto.InternalMessageInfo

func (m *QueryAllPoolResponse) GetPool() []Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *QueryAllPoolResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolParamRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolParamRequest) Reset()         { *m = QueryGetPoolParamRequest{} }
func (m *QueryGetPoolParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolParamRequest) ProtoMessage()    {}
func (*QueryGetPoolParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{6}
}
func (m *QueryGetPoolParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolParamRequest.Merge(m, src)
}
func (m *QueryGetPoolParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolParamRequest proto.InternalMessageInfo

func (m *QueryGetPoolParamRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolParamResponse struct {
	PoolParam *PoolParam `protobuf:"bytes,1,opt,name=poolParam,proto3" json:"poolParam,omitempty"`
}

func (m *QueryGetPoolParamResponse) Reset()         { *m = QueryGetPoolParamResponse{} }
func (m *QueryGetPoolParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolParamResponse) ProtoMessage()    {}
func (*QueryGetPoolParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{7}
}
func (m *QueryGetPoolParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolParamResponse.Merge(m, src)
}
func (m *QueryGetPoolParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolParamResponse proto.InternalMessageInfo

func (m *QueryGetPoolParamResponse) GetPoolParam() *PoolParam {
	if m != nil {
		return m.PoolParam
	}
	return nil
}

type QueryGetPoolTotalLiquidityRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolTotalLiquidityRequest) Reset()         { *m = QueryGetPoolTotalLiquidityRequest{} }
func (m *QueryGetPoolTotalLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolTotalLiquidityRequest) ProtoMessage()    {}
func (*QueryGetPoolTotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{8}
}
func (m *QueryGetPoolTotalLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolTotalLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolTotalLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolTotalLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolTotalLiquidityRequest.Merge(m, src)
}
func (m *QueryGetPoolTotalLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolTotalLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolTotalLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolTotalLiquidityRequest proto.InternalMessageInfo

func (m *QueryGetPoolTotalLiquidityRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolTotalLiquidityResponse struct {
	TotalLiquidity uint64 `protobuf:"varint,1,opt,name=totalLiquidity,proto3" json:"totalLiquidity,omitempty"`
}

func (m *QueryGetPoolTotalLiquidityResponse) Reset()         { *m = QueryGetPoolTotalLiquidityResponse{} }
func (m *QueryGetPoolTotalLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolTotalLiquidityResponse) ProtoMessage()    {}
func (*QueryGetPoolTotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{9}
}
func (m *QueryGetPoolTotalLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolTotalLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolTotalLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolTotalLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolTotalLiquidityResponse.Merge(m, src)
}
func (m *QueryGetPoolTotalLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolTotalLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolTotalLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolTotalLiquidityResponse proto.InternalMessageInfo

func (m *QueryGetPoolTotalLiquidityResponse) GetTotalLiquidity() uint64 {
	if m != nil {
		return m.TotalLiquidity
	}
	return 0
}

type QueryGetPoolTokenDenomRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId uint64 `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (m *QueryGetPoolTokenDenomRequest) Reset()         { *m = QueryGetPoolTokenDenomRequest{} }
func (m *QueryGetPoolTokenDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolTokenDenomRequest) ProtoMessage()    {}
func (*QueryGetPoolTokenDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{10}
}
func (m *QueryGetPoolTokenDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolTokenDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolTokenDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolTokenDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolTokenDenomRequest.Merge(m, src)
}
func (m *QueryGetPoolTokenDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolTokenDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolTokenDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolTokenDenomRequest proto.InternalMessageInfo

func (m *QueryGetPoolTokenDenomRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetPoolTokenDenomRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryGetPoolTokenDenomResponse struct {
	TokenDenom string `protobuf:"bytes,1,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
}

func (m *QueryGetPoolTokenDenomResponse) Reset()         { *m = QueryGetPoolTokenDenomResponse{} }
func (m *QueryGetPoolTokenDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolTokenDenomResponse) ProtoMessage()    {}
func (*QueryGetPoolTokenDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{11}
}
func (m *QueryGetPoolTokenDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolTokenDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolTokenDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolTokenDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolTokenDenomResponse.Merge(m, src)
}
func (m *QueryGetPoolTokenDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolTokenDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolTokenDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolTokenDenomResponse proto.InternalMessageInfo

func (m *QueryGetPoolTokenDenomResponse) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

type QueryGetPoolShareTokenDenomRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolShareTokenDenomRequest) Reset()         { *m = QueryGetPoolShareTokenDenomRequest{} }
func (m *QueryGetPoolShareTokenDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolShareTokenDenomRequest) ProtoMessage()    {}
func (*QueryGetPoolShareTokenDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{12}
}
func (m *QueryGetPoolShareTokenDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolShareTokenDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolShareTokenDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolShareTokenDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolShareTokenDenomRequest.Merge(m, src)
}
func (m *QueryGetPoolShareTokenDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolShareTokenDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolShareTokenDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolShareTokenDenomRequest proto.InternalMessageInfo

func (m *QueryGetPoolShareTokenDenomRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolShareTokenDenomResponse struct {
	ShareDenom string `protobuf:"bytes,1,opt,name=shareDenom,proto3" json:"shareDenom,omitempty"`
}

func (m *QueryGetPoolShareTokenDenomResponse) Reset()         { *m = QueryGetPoolShareTokenDenomResponse{} }
func (m *QueryGetPoolShareTokenDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolShareTokenDenomResponse) ProtoMessage()    {}
func (*QueryGetPoolShareTokenDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{13}
}
func (m *QueryGetPoolShareTokenDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolShareTokenDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolShareTokenDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolShareTokenDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolShareTokenDenomResponse.Merge(m, src)
}
func (m *QueryGetPoolShareTokenDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolShareTokenDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolShareTokenDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolShareTokenDenomResponse proto.InternalMessageInfo

func (m *QueryGetPoolShareTokenDenomResponse) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

type QueryGetPoolAssetReserveRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId uint64 `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (m *QueryGetPoolAssetReserveRequest) Reset()         { *m = QueryGetPoolAssetReserveRequest{} }
func (m *QueryGetPoolAssetReserveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolAssetReserveRequest) ProtoMessage()    {}
func (*QueryGetPoolAssetReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{14}
}
func (m *QueryGetPoolAssetReserveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolAssetReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolAssetReserveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolAssetReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolAssetReserveRequest.Merge(m, src)
}
func (m *QueryGetPoolAssetReserveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolAssetReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolAssetReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolAssetReserveRequest proto.InternalMessageInfo

func (m *QueryGetPoolAssetReserveRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetPoolAssetReserveRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryGetPoolAssetReserveResponse struct {
	Reserve uint64 `protobuf:"varint,1,opt,name=reserve,proto3" json:"reserve,omitempty"`
}

func (m *QueryGetPoolAssetReserveResponse) Reset()         { *m = QueryGetPoolAssetReserveResponse{} }
func (m *QueryGetPoolAssetReserveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolAssetReserveResponse) ProtoMessage()    {}
func (*QueryGetPoolAssetReserveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{15}
}
func (m *QueryGetPoolAssetReserveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolAssetReserveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolAssetReserveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolAssetReserveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolAssetReserveResponse.Merge(m, src)
}
func (m *QueryGetPoolAssetReserveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolAssetReserveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolAssetReserveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolAssetReserveResponse proto.InternalMessageInfo

func (m *QueryGetPoolAssetReserveResponse) GetReserve() uint64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

type QueryGetPoolAssetsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolAssetsRequest) Reset()         { *m = QueryGetPoolAssetsRequest{} }
func (m *QueryGetPoolAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolAssetsRequest) ProtoMessage()    {}
func (*QueryGetPoolAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{16}
}
func (m *QueryGetPoolAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolAssetsRequest.Merge(m, src)
}
func (m *QueryGetPoolAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolAssetsRequest proto.InternalMessageInfo

func (m *QueryGetPoolAssetsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolAssetsResponse struct {
	Assets []*PoolToken `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (m *QueryGetPoolAssetsResponse) Reset()         { *m = QueryGetPoolAssetsResponse{} }
func (m *QueryGetPoolAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolAssetsResponse) ProtoMessage()    {}
func (*QueryGetPoolAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9aaeeea1ec1219, []int{17}
}
func (m *QueryGetPoolAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolAssetsResponse.Merge(m, src)
}
func (m *QueryGetPoolAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolAssetsResponse proto.InternalMessageInfo

func (m *QueryGetPoolAssetsResponse) GetAssets() []*PoolToken {
	if m != nil {
		return m.Assets
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "frogchain.amm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "frogchain.amm.QueryParamsResponse")
	proto.RegisterType((*QueryGetPoolRequest)(nil), "frogchain.amm.QueryGetPoolRequest")
	proto.RegisterType((*QueryGetPoolResponse)(nil), "frogchain.amm.QueryGetPoolResponse")
	proto.RegisterType((*QueryAllPoolRequest)(nil), "frogchain.amm.QueryAllPoolRequest")
	proto.RegisterType((*QueryAllPoolResponse)(nil), "frogchain.amm.QueryAllPoolResponse")
	proto.RegisterType((*QueryGetPoolParamRequest)(nil), "frogchain.amm.QueryGetPoolParamRequest")
	proto.RegisterType((*QueryGetPoolParamResponse)(nil), "frogchain.amm.QueryGetPoolParamResponse")
	proto.RegisterType((*QueryGetPoolTotalLiquidityRequest)(nil), "frogchain.amm.QueryGetPoolTotalLiquidityRequest")
	proto.RegisterType((*QueryGetPoolTotalLiquidityResponse)(nil), "frogchain.amm.QueryGetPoolTotalLiquidityResponse")
	proto.RegisterType((*QueryGetPoolTokenDenomRequest)(nil), "frogchain.amm.QueryGetPoolTokenDenomRequest")
	proto.RegisterType((*QueryGetPoolTokenDenomResponse)(nil), "frogchain.amm.QueryGetPoolTokenDenomResponse")
	proto.RegisterType((*QueryGetPoolShareTokenDenomRequest)(nil), "frogchain.amm.QueryGetPoolShareTokenDenomRequest")
	proto.RegisterType((*QueryGetPoolShareTokenDenomResponse)(nil), "frogchain.amm.QueryGetPoolShareTokenDenomResponse")
	proto.RegisterType((*QueryGetPoolAssetReserveRequest)(nil), "frogchain.amm.QueryGetPoolAssetReserveRequest")
	proto.RegisterType((*QueryGetPoolAssetReserveResponse)(nil), "frogchain.amm.QueryGetPoolAssetReserveResponse")
	proto.RegisterType((*QueryGetPoolAssetsRequest)(nil), "frogchain.amm.QueryGetPoolAssetsRequest")
	proto.RegisterType((*QueryGetPoolAssetsResponse)(nil), "frogchain.amm.QueryGetPoolAssetsResponse")
}

func init() { proto.RegisterFile("frogchain/amm/query.proto", fileDescriptor_fd9aaeeea1ec1219) }

var fileDescriptor_fd9aaeeea1ec1219 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x5f, 0x4f, 0xdb, 0x56,
	0x18, 0xc6, 0xe3, 0x2c, 0x0b, 0xe2, 0xdd, 0x40, 0xda, 0x09, 0xd9, 0x82, 0x37, 0x0c, 0x1c, 0x06,
	0x64, 0x01, 0xec, 0xf0, 0x47, 0x5c, 0x71, 0x31, 0xd0, 0x18, 0x62, 0x43, 0x13, 0x33, 0xbb, 0x9a,
	0x54, 0x45, 0x86, 0x9c, 0x1a, 0x0b, 0xc7, 0x27, 0x89, 0x0d, 0x2a, 0x42, 0xdc, 0xf4, 0xbe, 0x55,
	0xab, 0x7e, 0x83, 0x7e, 0x84, 0xaa, 0x52, 0xbf, 0x02, 0xea, 0x15, 0x52, 0x6f, 0x7a, 0x55, 0x55,
	0xd0, 0x0f, 0x52, 0xe5, 0xf8, 0x4d, 0x62, 0x27, 0xb6, 0x13, 0xee, 0xc8, 0x79, 0x9f, 0xf7, 0x7d,
	0x7e, 0xe7, 0x3d, 0xe1, 0x01, 0x98, 0x7c, 0xdc, 0xe4, 0xe6, 0xc9, 0xa9, 0x61, 0x39, 0x9a, 0x51,
	0xab, 0x69, 0x8d, 0x73, 0xd6, 0xbc, 0x54, 0xeb, 0x4d, 0xee, 0x71, 0x32, 0xd6, 0x29, 0xa9, 0x46,
	0xad, 0x26, 0x4f, 0x98, 0xdc, 0xe4, 0xa2, 0xa2, 0xb5, 0x7e, 0xf2, 0x45, 0xf2, 0x2f, 0x26, 0xe7,
	0xa6, 0xcd, 0x34, 0xa3, 0x6e, 0x69, 0x86, 0xe3, 0x70, 0xcf, 0xf0, 0x2c, 0xee, 0xb8, 0x58, 0x2d,
	0x9d, 0x70, 0xb7, 0xc6, 0x5d, 0xed, 0xd8, 0x70, 0x99, 0x3f, 0x5b, 0xbb, 0x58, 0x3d, 0x66, 0x9e,
	0xb1, 0xaa, 0xd5, 0x0d, 0xd3, 0x72, 0x84, 0x18, 0xb5, 0x72, 0x98, 0xa4, 0x6e, 0x34, 0x8d, 0x5a,
	0x7b, 0x4e, 0xa1, 0xa7, 0xc6, 0xb9, 0x8d, 0x15, 0xa5, 0xbf, 0x52, 0x11, 0xad, 0x09, 0x75, 0x8f,
	0x9f, 0x31, 0x74, 0xa5, 0x13, 0x40, 0xfe, 0x6d, 0x71, 0x1d, 0x0a, 0x3b, 0x9d, 0x35, 0xce, 0x99,
	0xeb, 0xd1, 0xbf, 0x20, 0x17, 0x3a, 0x75, 0xeb, 0xdc, 0x71, 0x19, 0x59, 0x87, 0xac, 0x8f, 0x55,
	0x90, 0x66, 0xa4, 0xe2, 0x77, 0x6b, 0x79, 0x35, 0xb4, 0x22, 0xd5, 0x97, 0xef, 0x64, 0x6e, 0x3e,
	0x4d, 0xa7, 0x74, 0x94, 0xd2, 0x79, 0x9c, 0xb5, 0xc7, 0xbc, 0x43, 0xce, 0x6d, 0xb4, 0x20, 0xe3,
	0x90, 0xb6, 0xaa, 0x62, 0x4e, 0x46, 0x4f, 0x5b, 0x55, 0xba, 0x0b, 0x13, 0x61, 0x19, 0x7a, 0xae,
	0x40, 0xa6, 0xf5, 0x19, 0x1d, 0x73, 0xbd, 0x8e, 0x9c, 0xdb, 0xe8, 0x27, 0x64, 0xf4, 0x11, 0xba,
	0x6d, 0xdb, 0x76, 0xd0, 0xed, 0x4f, 0x80, 0xee, 0xc2, 0x71, 0xd6, 0x82, 0xea, 0xbf, 0x8e, 0xda,
	0x7a, 0x1d, 0xd5, 0x7f, 0x79, 0x7c, 0x1d, 0xf5, 0xd0, 0x30, 0x19, 0xf6, 0xea, 0x81, 0x4e, 0xfa,
	0x5c, 0x42, 0xcc, 0xce, 0xfc, 0x3e, 0xcc, 0x6f, 0x86, 0xc0, 0x24, 0x7b, 0x21, 0x9e, 0xb4, 0xe0,
	0x59, 0x1c, 0xc8, 0xe3, 0x7b, 0x85, 0x80, 0x4a, 0x50, 0x08, 0xae, 0x4d, 0xbc, 0x40, 0xdc, 0x8a,
	0x8f, 0x60, 0x32, 0x42, 0x8b, 0x17, 0xd8, 0x84, 0xd1, 0x7a, 0xfb, 0x10, 0x17, 0x54, 0x88, 0xb8,
	0x85, 0xdf, 0xd4, 0x95, 0xd2, 0x75, 0x98, 0x0d, 0x0e, 0xfd, 0x8f, 0x7b, 0x86, 0x7d, 0x60, 0x35,
	0xce, 0xad, 0xaa, 0xe5, 0x5d, 0xc6, 0x91, 0x1c, 0x00, 0x4d, 0x6a, 0x42, 0xa4, 0x05, 0x18, 0xf7,
	0x42, 0x15, 0x9c, 0xd0, 0x73, 0x4a, 0xf7, 0x61, 0x2a, 0x3c, 0xed, 0x8c, 0x39, 0x7f, 0x30, 0x87,
	0xc7, 0x2d, 0x82, 0x14, 0x60, 0xc4, 0x70, 0x5d, 0xe6, 0xed, 0x57, 0xc5, 0xea, 0x33, 0x7a, 0xfb,
	0x23, 0xfd, 0x1d, 0x94, 0xb8, 0x51, 0x08, 0xa5, 0x00, 0x78, 0x9d, 0x53, 0x31, 0x73, 0x54, 0x0f,
	0x9c, 0xd0, 0x8d, 0xf0, 0xd5, 0x8e, 0x4e, 0x8d, 0x26, 0x1b, 0x48, 0x44, 0x77, 0x61, 0x2e, 0xb1,
	0xab, 0x6b, 0xee, 0xb6, 0x4a, 0x21, 0xf3, 0xee, 0x09, 0xfd, 0x1b, 0xa6, 0x83, 0x63, 0xb6, 0x5b,
	0xb7, 0xd2, 0x99, 0xcb, 0x9a, 0x17, 0xec, 0xe1, 0xbb, 0xd8, 0x82, 0x99, 0xf8, 0x61, 0x08, 0x54,
	0x80, 0x91, 0xa6, 0x7f, 0x84, 0x23, 0xdb, 0x1f, 0xe9, 0x52, 0xf8, 0xcb, 0x26, 0xba, 0xdd, 0xb8,
	0xeb, 0xff, 0x03, 0x72, 0x94, 0x18, 0x4d, 0xca, 0x90, 0x15, 0x4c, 0x2e, 0xfe, 0x76, 0x45, 0x7d,
	0x2f, 0xc5, 0xb2, 0x74, 0xd4, 0xad, 0xbd, 0x07, 0xf8, 0x56, 0x0c, 0x24, 0x0e, 0x64, 0xfd, 0x54,
	0x22, 0xb3, 0x3d, 0x5d, 0xfd, 0xb1, 0x27, 0xd3, 0x24, 0x89, 0x0f, 0x43, 0xa7, 0x9e, 0x7e, 0xf8,
	0xf2, 0x2a, 0xfd, 0x13, 0xc9, 0x6b, 0x51, 0x79, 0x4d, 0x1a, 0x7e, 0x0e, 0x90, 0xc8, 0x51, 0xe1,
	0x08, 0x94, 0xe7, 0x12, 0x35, 0xe8, 0x37, 0x23, 0xfc, 0x64, 0x52, 0xd0, 0xfa, 0x93, 0x5c, 0xbb,
	0xb2, 0xaa, 0xd7, 0x84, 0xc3, 0x88, 0x58, 0x9a, 0x1d, 0xe3, 0x1a, 0x8e, 0xc2, 0x68, 0xd7, 0x9e,
	0x38, 0xa3, 0x3f, 0x0b, 0xd7, 0x3c, 0xc9, 0x45, 0xb8, 0x92, 0x67, 0x12, 0x7c, 0x1f, 0xcc, 0x10,
	0xb2, 0x98, 0x70, 0x91, 0x60, 0x22, 0xc9, 0xc5, 0xc1, 0x42, 0x04, 0x28, 0x09, 0x80, 0x5f, 0x09,
	0xed, 0x01, 0x30, 0x99, 0x57, 0xe9, 0xfe, 0x91, 0xf3, 0x17, 0xf0, 0x46, 0x82, 0x7c, 0x64, 0x92,
	0x90, 0x72, 0x82, 0x5f, 0x64, 0x52, 0xc9, 0xab, 0x0f, 0xe8, 0x40, 0xd4, 0x0d, 0x81, 0xaa, 0x92,
	0xe5, 0x38, 0x54, 0x11, 0x57, 0x15, 0xbb, 0xdd, 0xe8, 0x43, 0xbf, 0x96, 0xe0, 0x87, 0xbe, 0x94,
	0x21, 0xcb, 0x89, 0xf6, 0x3d, 0x29, 0x22, 0xaf, 0x0c, 0xa9, 0x46, 0xd0, 0xb2, 0x00, 0x2d, 0x91,
	0x62, 0x3c, 0xe8, 0x19, 0x73, 0x2a, 0xd5, 0x56, 0x93, 0x0f, 0xf9, 0x4e, 0x82, 0x1f, 0xa3, 0x23,
	0x89, 0x24, 0x2d, 0x2a, 0x3a, 0xf4, 0xe4, 0xb5, 0x87, 0xb4, 0x20, 0xf3, 0xa6, 0x60, 0x2e, 0x13,
	0x35, 0x8e, 0x59, 0xa4, 0x5f, 0x3f, 0xf9, 0x5b, 0x09, 0x72, 0x11, 0xc1, 0x45, 0xd4, 0x04, 0x86,
	0x88, 0xb8, 0x94, 0xb5, 0xa1, 0xf5, 0x08, 0xbc, 0x25, 0x80, 0x37, 0xc9, 0x46, 0x1c, 0xb0, 0x88,
	0xa8, 0x0a, 0xc6, 0xa4, 0x80, 0xd5, 0xae, 0x30, 0x72, 0xaf, 0xc9, 0x4b, 0x09, 0xc6, 0x42, 0x21,
	0x48, 0x8a, 0x83, 0x00, 0x3a, 0xe9, 0xf5, 0xdb, 0x10, 0x4a, 0x84, 0x5c, 0x12, 0x90, 0xf3, 0x64,
	0x2e, 0x11, 0xd2, 0x15, 0x74, 0x3b, 0xda, 0xcd, 0x9d, 0x22, 0xdd, 0xde, 0x29, 0xd2, 0xe7, 0x3b,
	0x45, 0x7a, 0x71, 0xaf, 0xa4, 0x6e, 0xef, 0x95, 0xd4, 0xc7, 0x7b, 0x25, 0xf5, 0x7f, 0xbe, 0xdb,
	0xfd, 0x44, 0xf4, 0x7b, 0x97, 0x75, 0xe6, 0x1e, 0x67, 0xc5, 0xbf, 0x96, 0xeb, 0x5f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x90, 0xb8, 0x38, 0xa0, 0x5c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error)
	PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error)
	// Queries a list of GetPoolParam items.
	GetPoolParam(ctx context.Context, in *QueryGetPoolParamRequest, opts ...grpc.CallOption) (*QueryGetPoolParamResponse, error)
	// Queries a list of GetPoolTotalLiquidity items.
	GetPoolTotalLiquidity(ctx context.Context, in *QueryGetPoolTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryGetPoolTotalLiquidityResponse, error)
	// Queries a list of GetPoolTokenDenom items.
	GetPoolTokenDenom(ctx context.Context, in *QueryGetPoolTokenDenomRequest, opts ...grpc.CallOption) (*QueryGetPoolTokenDenomResponse, error)
	// Queries a list of GetPoolShareTokenDenom items.
	GetPoolShareTokenDenom(ctx context.Context, in *QueryGetPoolShareTokenDenomRequest, opts ...grpc.CallOption) (*QueryGetPoolShareTokenDenomResponse, error)
	// Queries a list of GetPoolAssetReserve items.
	GetPoolAssetReserve(ctx context.Context, in *QueryGetPoolAssetReserveRequest, opts ...grpc.CallOption) (*QueryGetPoolAssetReserveResponse, error)
	// Queries a list of GetPoolAssets items.
	GetPoolAssets(ctx context.Context, in *QueryGetPoolAssetsRequest, opts ...grpc.CallOption) (*QueryGetPoolAssetsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error) {
	out := new(QueryGetPoolResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error) {
	out := new(QueryAllPoolResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/PoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolParam(ctx context.Context, in *QueryGetPoolParamRequest, opts ...grpc.CallOption) (*QueryGetPoolParamResponse, error) {
	out := new(QueryGetPoolParamResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolTotalLiquidity(ctx context.Context, in *QueryGetPoolTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryGetPoolTotalLiquidityResponse, error) {
	out := new(QueryGetPoolTotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolTotalLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolTokenDenom(ctx context.Context, in *QueryGetPoolTokenDenomRequest, opts ...grpc.CallOption) (*QueryGetPoolTokenDenomResponse, error) {
	out := new(QueryGetPoolTokenDenomResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolTokenDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolShareTokenDenom(ctx context.Context, in *QueryGetPoolShareTokenDenomRequest, opts ...grpc.CallOption) (*QueryGetPoolShareTokenDenomResponse, error) {
	out := new(QueryGetPoolShareTokenDenomResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolShareTokenDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolAssetReserve(ctx context.Context, in *QueryGetPoolAssetReserveRequest, opts ...grpc.CallOption) (*QueryGetPoolAssetReserveResponse, error) {
	out := new(QueryGetPoolAssetReserveResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolAssetReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolAssets(ctx context.Context, in *QueryGetPoolAssetsRequest, opts ...grpc.CallOption) (*QueryGetPoolAssetsResponse, error) {
	out := new(QueryGetPoolAssetsResponse)
	err := c.cc.Invoke(ctx, "/frogchain.amm.Query/GetPoolAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error)
	PoolAll(context.Context, *QueryAllPoolRequest) (*QueryAllPoolResponse, error)
	// Queries a list of GetPoolParam items.
	GetPoolParam(context.Context, *QueryGetPoolParamRequest) (*QueryGetPoolParamResponse, error)
	// Queries a list of GetPoolTotalLiquidity items.
	GetPoolTotalLiquidity(context.Context, *QueryGetPoolTotalLiquidityRequest) (*QueryGetPoolTotalLiquidityResponse, error)
	// Queries a list of GetPoolTokenDenom items.
	GetPoolTokenDenom(context.Context, *QueryGetPoolTokenDenomRequest) (*QueryGetPoolTokenDenomResponse, error)
	// Queries a list of GetPoolShareTokenDenom items.
	GetPoolShareTokenDenom(context.Context, *QueryGetPoolShareTokenDenomRequest) (*QueryGetPoolShareTokenDenomResponse, error)
	// Queries a list of GetPoolAssetReserve items.
	GetPoolAssetReserve(context.Context, *QueryGetPoolAssetReserveRequest) (*QueryGetPoolAssetReserveResponse, error)
	// Queries a list of GetPoolAssets items.
	GetPoolAssets(context.Context, *QueryGetPoolAssetsRequest) (*QueryGetPoolAssetsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryGetPoolRequest) (*QueryGetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) PoolAll(ctx context.Context, req *QueryAllPoolRequest) (*QueryAllPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAll not implemented")
}
func (*UnimplementedQueryServer) GetPoolParam(ctx context.Context, req *QueryGetPoolParamRequest) (*QueryGetPoolParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolParam not implemented")
}
func (*UnimplementedQueryServer) GetPoolTotalLiquidity(ctx context.Context, req *QueryGetPoolTotalLiquidityRequest) (*QueryGetPoolTotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolTotalLiquidity not implemented")
}
func (*UnimplementedQueryServer) GetPoolTokenDenom(ctx context.Context, req *QueryGetPoolTokenDenomRequest) (*QueryGetPoolTokenDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolTokenDenom not implemented")
}
func (*UnimplementedQueryServer) GetPoolShareTokenDenom(ctx context.Context, req *QueryGetPoolShareTokenDenomRequest) (*QueryGetPoolShareTokenDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolShareTokenDenom not implemented")
}
func (*UnimplementedQueryServer) GetPoolAssetReserve(ctx context.Context, req *QueryGetPoolAssetReserveRequest) (*QueryGetPoolAssetReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolAssetReserve not implemented")
}
func (*UnimplementedQueryServer) GetPoolAssets(ctx context.Context, req *QueryGetPoolAssetsRequest) (*QueryGetPoolAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolAssets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryGetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/PoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAll(ctx, req.(*QueryAllPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolParam(ctx, req.(*QueryGetPoolParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolTotalLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolTotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolTotalLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolTotalLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolTotalLiquidity(ctx, req.(*QueryGetPoolTotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolTokenDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolTokenDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolTokenDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolTokenDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolTokenDenom(ctx, req.(*QueryGetPoolTokenDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolShareTokenDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolShareTokenDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolShareTokenDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolShareTokenDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolShareTokenDenom(ctx, req.(*QueryGetPoolShareTokenDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolAssetReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolAssetReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolAssetReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolAssetReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolAssetReserve(ctx, req.(*QueryGetPoolAssetReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frogchain.amm.Query/GetPoolAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolAssets(ctx, req.(*QueryGetPoolAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "frogchain.amm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "PoolAll",
			Handler:    _Query_PoolAll_Handler,
		},
		{
			MethodName: "GetPoolParam",
			Handler:    _Query_GetPoolParam_Handler,
		},
		{
			MethodName: "GetPoolTotalLiquidity",
			Handler:    _Query_GetPoolTotalLiquidity_Handler,
		},
		{
			MethodName: "GetPoolTokenDenom",
			Handler:    _Query_GetPoolTokenDenom_Handler,
		},
		{
			MethodName: "GetPoolShareTokenDenom",
			Handler:    _Query_GetPoolShareTokenDenom_Handler,
		},
		{
			MethodName: "GetPoolAssetReserve",
			Handler:    _Query_GetPoolAssetReserve_Handler,
		},
		{
			MethodName: "GetPoolAssets",
			Handler:    _Query_GetPoolAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frogchain/amm/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolParam != nil {
		{
			size, err := m.PoolParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolTotalLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolTotalLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolTotalLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolTotalLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolTotalLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolTotalLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLiquidity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalLiquidity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolTokenDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolTokenDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolTokenDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolTokenDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolTokenDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolTokenDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolShareTokenDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolShareTokenDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolShareTokenDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolShareTokenDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolShareTokenDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolShareTokenDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolAssetReserveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolAssetReserveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolAssetReserveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolAssetReserveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolAssetReserveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolAssetReserveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reserve != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Reserve))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolParam != nil {
		l = m.PoolParam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolTotalLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolTotalLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLiquidity != 0 {
		n += 1 + sovQuery(uint64(m.TotalLiquidity))
	}
	return n
}

func (m *QueryGetPoolTokenDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryGetPoolTokenDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolShareTokenDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolShareTokenDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolAssetReserveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryGetPoolAssetReserveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserve != 0 {
		n += 1 + sovQuery(uint64(m.Reserve))
	}
	return n
}

func (m *QueryGetPoolAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, Pool{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolParam == nil {
				m.PoolParam = &PoolParam{}
			}
			if err := m.PoolParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolTotalLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolTotalLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolTotalLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolTotalLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolTotalLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolTotalLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			m.TotalLiquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLiquidity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolTokenDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolTokenDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolTokenDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolTokenDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolTokenDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolTokenDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolShareTokenDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolShareTokenDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolShareTokenDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolShareTokenDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolShareTokenDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolShareTokenDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolAssetReserveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolAssetReserveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolAssetReserveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolAssetReserveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolAssetReserveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolAssetReserveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			m.Reserve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserve |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &PoolToken{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
