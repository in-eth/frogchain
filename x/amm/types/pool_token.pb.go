// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frogchain/amm/pool_token.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pool has my PoolAssets that has token and weight.
// weight determines the value of token.
type PoolToken struct {
	TokenDenom string `protobuf:"bytes,1,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	// token weight represents the value of token
	TokenWeight uint64 `protobuf:"varint,2,opt,name=tokenWeight,proto3" json:"tokenWeight,omitempty"`
	// token reserve represents the reserve amount of the pool in the module
	TokenReserve uint64 `protobuf:"varint,3,opt,name=tokenReserve,proto3" json:"tokenReserve,omitempty"`
}

func (m *PoolToken) Reset()         { *m = PoolToken{} }
func (m *PoolToken) String() string { return proto.CompactTextString(m) }
func (*PoolToken) ProtoMessage()    {}
func (*PoolToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d30cd7fc94ae9a8, []int{0}
}
func (m *PoolToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolToken.Merge(m, src)
}
func (m *PoolToken) XXX_Size() int {
	return m.Size()
}
func (m *PoolToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolToken.DiscardUnknown(m)
}

var xxx_messageInfo_PoolToken proto.InternalMessageInfo

func (m *PoolToken) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *PoolToken) GetTokenWeight() uint64 {
	if m != nil {
		return m.TokenWeight
	}
	return 0
}

func (m *PoolToken) GetTokenReserve() uint64 {
	if m != nil {
		return m.TokenReserve
	}
	return 0
}

func init() {
	proto.RegisterType((*PoolToken)(nil), "frogchain.amm.PoolToken")
}

func init() { proto.RegisterFile("frogchain/amm/pool_token.proto", fileDescriptor_0d30cd7fc94ae9a8) }

var fileDescriptor_0d30cd7fc94ae9a8 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x2b, 0xca, 0x4f,
	0x4f, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xcc, 0xcd, 0xd5, 0x2f, 0xc8, 0xcf, 0xcf, 0x89, 0x2f,
	0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xcb, 0xeb, 0x25,
	0xe6, 0xe6, 0x2a, 0x15, 0x72, 0x71, 0x06, 0xe4, 0xe7, 0xe7, 0x84, 0x80, 0x54, 0x08, 0xc9, 0x71,
	0x71, 0x81, 0x95, 0xba, 0xa4, 0xe6, 0xe5, 0xe7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x21,
	0x89, 0x08, 0x29, 0x70, 0x71, 0x83, 0x79, 0xe1, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0x2c, 0x41, 0xc8, 0x42, 0x42, 0x4a, 0x5c, 0x3c, 0x60, 0x6e, 0x50, 0x6a, 0x71, 0x6a,
	0x51, 0x59, 0xaa, 0x04, 0x33, 0x58, 0x09, 0x8a, 0x98, 0x93, 0xfe, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0x44, 0x89, 0x22, 0xdc, 0x5e, 0x01, 0x76, 0x7d, 0x49, 0x65, 0x41, 0x6a,
	0x71, 0x12, 0x1b, 0xd8, 0xe5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x95, 0xb8, 0x71,
	0xdb, 0x00, 0x00, 0x00,
}

func (m *PoolToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenReserve != 0 {
		i = encodeVarintPoolToken(dAtA, i, uint64(m.TokenReserve))
		i--
		dAtA[i] = 0x18
	}
	if m.TokenWeight != 0 {
		i = encodeVarintPoolToken(dAtA, i, uint64(m.TokenWeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintPoolToken(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovPoolToken(uint64(l))
	}
	if m.TokenWeight != 0 {
		n += 1 + sovPoolToken(uint64(m.TokenWeight))
	}
	if m.TokenReserve != 0 {
		n += 1 + sovPoolToken(uint64(m.TokenReserve))
	}
	return n
}

func sovPoolToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolToken(x uint64) (n int) {
	return sovPoolToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenWeight", wireType)
			}
			m.TokenWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReserve", wireType)
			}
			m.TokenReserve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenReserve |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoolToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolToken = fmt.Errorf("proto: unexpected end of group")
)
