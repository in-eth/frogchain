// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frogchain/investibc/params.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	AdminAccount                    string     `protobuf:"bytes,1,opt,name=adminAccount,proto3" json:"adminAccount,omitempty" yaml:"admin_account"`
	DepositDenom                    string     `protobuf:"bytes,2,opt,name=depositDenom,proto3" json:"depositDenom,omitempty" yaml:"deposit_denom"`
	CurrentDepositAmount            types.Coin `protobuf:"bytes,3,opt,name=currentDepositAmount,proto3" json:"currentDepositAmount" yaml:"current_deposit_amount"`
	LiquidityDenom                  string     `protobuf:"bytes,4,opt,name=liquidityDenom,proto3" json:"liquidityDenom,omitempty" yaml:"liquidity_denom"`
	LockTokenTimestamp              uint64     `protobuf:"varint,5,opt,name=lockTokenTimestamp,proto3" json:"lockTokenTimestamp,omitempty"`
	DepositLastTime                 uint64     `protobuf:"varint,6,opt,name=depositLastTime,proto3" json:"depositLastTime,omitempty"`
	IcaConnectionId                 string     `protobuf:"bytes,7,opt,name=icaConnectionId,proto3" json:"icaConnectionId,omitempty"`
	DepositTokenToICAPacketSend     bool       `protobuf:"varint,8,opt,name=depositTokenToICAPacketSend,proto3" json:"depositTokenToICAPacketSend,omitempty"`
	JoinSwapExactAmountInPacketSend bool       `protobuf:"varint,9,opt,name=joinSwapExactAmountInPacketSend,proto3" json:"joinSwapExactAmountInPacketSend,omitempty"`
	LockTokensPacketSend            bool       `protobuf:"varint,10,opt,name=lockTokensPacketSend,proto3" json:"lockTokensPacketSend,omitempty"`
	UnLockLiquidityPacketSend       bool       `protobuf:"varint,11,opt,name=unLockLiquidityPacketSend,proto3" json:"unLockLiquidityPacketSend,omitempty"`
	ClaimRewardPacketSend           bool       `protobuf:"varint,12,opt,name=claimRewardPacketSend,proto3" json:"claimRewardPacketSend,omitempty"`
	DepositTokenToICAPacketSent     bool       `protobuf:"varint,13,opt,name=depositTokenToICAPacketSent,proto3" json:"depositTokenToICAPacketSent,omitempty"`
	JoinSwapExactAmountInPacketSent bool       `protobuf:"varint,14,opt,name=joinSwapExactAmountInPacketSent,proto3" json:"joinSwapExactAmountInPacketSent,omitempty"`
	LockTokensPacketSent            bool       `protobuf:"varint,15,opt,name=lockTokensPacketSent,proto3" json:"lockTokensPacketSent,omitempty"`
	UnLockLiquidityPacketSent       bool       `protobuf:"varint,16,opt,name=unLockLiquidityPacketSent,proto3" json:"unLockLiquidityPacketSent,omitempty"`
	ClaimRewardPacketSent           bool       `protobuf:"varint,17,opt,name=claimRewardPacketSent,proto3" json:"claimRewardPacketSent,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1845c6e797f8b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAdminAccount() string {
	if m != nil {
		return m.AdminAccount
	}
	return ""
}

func (m *Params) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *Params) GetCurrentDepositAmount() types.Coin {
	if m != nil {
		return m.CurrentDepositAmount
	}
	return types.Coin{}
}

func (m *Params) GetLiquidityDenom() string {
	if m != nil {
		return m.LiquidityDenom
	}
	return ""
}

func (m *Params) GetLockTokenTimestamp() uint64 {
	if m != nil {
		return m.LockTokenTimestamp
	}
	return 0
}

func (m *Params) GetDepositLastTime() uint64 {
	if m != nil {
		return m.DepositLastTime
	}
	return 0
}

func (m *Params) GetIcaConnectionId() string {
	if m != nil {
		return m.IcaConnectionId
	}
	return ""
}

func (m *Params) GetDepositTokenToICAPacketSend() bool {
	if m != nil {
		return m.DepositTokenToICAPacketSend
	}
	return false
}

func (m *Params) GetJoinSwapExactAmountInPacketSend() bool {
	if m != nil {
		return m.JoinSwapExactAmountInPacketSend
	}
	return false
}

func (m *Params) GetLockTokensPacketSend() bool {
	if m != nil {
		return m.LockTokensPacketSend
	}
	return false
}

func (m *Params) GetUnLockLiquidityPacketSend() bool {
	if m != nil {
		return m.UnLockLiquidityPacketSend
	}
	return false
}

func (m *Params) GetClaimRewardPacketSend() bool {
	if m != nil {
		return m.ClaimRewardPacketSend
	}
	return false
}

func (m *Params) GetDepositTokenToICAPacketSent() bool {
	if m != nil {
		return m.DepositTokenToICAPacketSent
	}
	return false
}

func (m *Params) GetJoinSwapExactAmountInPacketSent() bool {
	if m != nil {
		return m.JoinSwapExactAmountInPacketSent
	}
	return false
}

func (m *Params) GetLockTokensPacketSent() bool {
	if m != nil {
		return m.LockTokensPacketSent
	}
	return false
}

func (m *Params) GetUnLockLiquidityPacketSent() bool {
	if m != nil {
		return m.UnLockLiquidityPacketSent
	}
	return false
}

func (m *Params) GetClaimRewardPacketSent() bool {
	if m != nil {
		return m.ClaimRewardPacketSent
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "frogchain.investibc.Params")
}

func init() { proto.RegisterFile("frogchain/investibc/params.proto", fileDescriptor_d4c1845c6e797f8b) }

var fileDescriptor_d4c1845c6e797f8b = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6e, 0x12, 0x41,
	0x18, 0x67, 0xb5, 0x22, 0x9d, 0xd6, 0x56, 0x47, 0x34, 0x53, 0x1a, 0x77, 0x09, 0x89, 0x09, 0xa7,
	0xdd, 0xb4, 0xea, 0xa5, 0xe9, 0x41, 0xa0, 0x26, 0x92, 0x70, 0x68, 0xb6, 0x3d, 0x79, 0x21, 0xc3,
	0xec, 0x88, 0x23, 0xec, 0xcc, 0xba, 0xfb, 0xd1, 0x96, 0xb7, 0xf0, 0xe8, 0xd1, 0x47, 0xf0, 0x31,
	0x7a, 0xec, 0xd1, 0x13, 0x31, 0xf0, 0x06, 0x3c, 0x81, 0xd9, 0xd9, 0x05, 0x29, 0x61, 0xc1, 0xdb,
	0xe4, 0xfb, 0xfd, 0x99, 0xdf, 0xf7, 0x3b, 0x7c, 0xa8, 0xfc, 0x39, 0x54, 0x5d, 0xf6, 0x85, 0x0a,
	0xe9, 0x08, 0x79, 0xc5, 0x23, 0x10, 0x1d, 0xe6, 0x04, 0x34, 0xa4, 0x7e, 0x64, 0x07, 0xa1, 0x02,
	0x85, 0x9f, 0xcf, 0x19, 0xf6, 0x9c, 0x51, 0x2a, 0x76, 0x55, 0x57, 0x69, 0xdc, 0x89, 0x5f, 0x09,
	0xb5, 0x64, 0x32, 0x15, 0xf9, 0x2a, 0x72, 0x3a, 0x34, 0xe2, 0xce, 0xd5, 0x51, 0x87, 0x03, 0x3d,
	0x72, 0x98, 0x12, 0x32, 0xc1, 0x2b, 0xbf, 0x0a, 0x28, 0x7f, 0xae, 0xbd, 0xf1, 0x29, 0xda, 0xa5,
	0x9e, 0x2f, 0x64, 0x8d, 0x31, 0x35, 0x90, 0x40, 0x8c, 0xb2, 0x51, 0xdd, 0xae, 0x93, 0xe9, 0xc8,
	0x2a, 0x0e, 0xa9, 0xdf, 0x3f, 0xa9, 0x68, 0xb4, 0x4d, 0x13, 0xb8, 0xe2, 0xde, 0x63, 0xc7, 0x6a,
	0x8f, 0x07, 0x2a, 0x12, 0x70, 0xc6, 0xa5, 0xf2, 0xc9, 0x83, 0x65, 0x75, 0x8a, 0xb6, 0xbd, 0x18,
	0xae, 0xb8, 0xf7, 0xd8, 0x18, 0x50, 0x91, 0x0d, 0xc2, 0x90, 0x4b, 0x38, 0x4b, 0xc6, 0x35, 0x5f,
	0x67, 0x78, 0x58, 0x36, 0xaa, 0x3b, 0xc7, 0x07, 0x76, 0xb2, 0x85, 0x1d, 0x6f, 0x61, 0xa7, 0x5b,
	0xd8, 0x0d, 0x25, 0x64, 0xfd, 0xf5, 0xed, 0xc8, 0xca, 0x4d, 0x47, 0xd6, 0xab, 0xe4, 0x93, 0xd4,
	0xa4, 0x3d, 0xfb, 0x8c, 0xfa, 0x49, 0xd6, 0x95, 0xee, 0xb8, 0x8e, 0xf6, 0xfa, 0xe2, 0xdb, 0x40,
	0x78, 0x02, 0x86, 0x49, 0xea, 0x2d, 0x9d, 0xba, 0x34, 0x1d, 0x59, 0x2f, 0x13, 0xc3, 0x39, 0x3e,
	0xcb, 0xbd, 0xa4, 0xc0, 0x36, 0xc2, 0x7d, 0xc5, 0x7a, 0x97, 0xaa, 0xc7, 0xe5, 0xa5, 0xf0, 0x79,
	0x04, 0xd4, 0x0f, 0xc8, 0xa3, 0xb2, 0x51, 0xdd, 0x72, 0x57, 0x20, 0xb8, 0x8a, 0xf6, 0xd3, 0x70,
	0x2d, 0x1a, 0x41, 0x3c, 0x27, 0x79, 0x4d, 0x5e, 0x1e, 0xc7, 0x4c, 0xc1, 0x68, 0x43, 0x49, 0xc9,
	0x19, 0x08, 0x25, 0x9b, 0x1e, 0x79, 0x1c, 0xc7, 0x73, 0x97, 0xc7, 0xf8, 0x3d, 0x3a, 0x4c, 0xc5,
	0xc9, 0x67, 0xaa, 0xd9, 0xa8, 0x9d, 0x53, 0xd6, 0xe3, 0x70, 0xc1, 0xa5, 0x47, 0x0a, 0x65, 0xa3,
	0x5a, 0x70, 0xd7, 0x51, 0xf0, 0x47, 0x64, 0x7d, 0x55, 0x42, 0x5e, 0x5c, 0xd3, 0xe0, 0xc3, 0x0d,
	0x65, 0x69, 0x41, 0x4d, 0xb9, 0xe0, 0xb2, 0xad, 0x5d, 0x36, 0xd1, 0xf0, 0x31, 0x2a, 0xce, 0xb7,
	0x8e, 0x16, 0xe4, 0x48, 0xcb, 0x57, 0x62, 0xf8, 0x14, 0x1d, 0x0c, 0x64, 0x4b, 0xb1, 0x5e, 0x6b,
	0xd6, 0xed, 0x82, 0x70, 0x47, 0x0b, 0xb3, 0x09, 0xf8, 0x2d, 0x7a, 0xc1, 0xfa, 0x54, 0xf8, 0x2e,
	0xbf, 0xa6, 0xa1, 0xb7, 0xa0, 0xdc, 0xd5, 0xca, 0xd5, 0xe0, 0xfa, 0xce, 0x80, 0x3c, 0xd9, 0xd4,
	0x19, 0x6c, 0xee, 0x0c, 0xc8, 0xde, 0xff, 0x74, 0x06, 0x19, 0x9d, 0x01, 0xd9, 0xcf, 0xec, 0x0c,
	0xd6, 0x75, 0x06, 0xe4, 0xe9, 0xfa, 0xce, 0x20, 0xab, 0x33, 0x20, 0xcf, 0xb2, 0x3b, 0x83, 0x93,
	0xad, 0x1f, 0x3f, 0xad, 0x5c, 0xfd, 0xdd, 0xed, 0xd8, 0x34, 0xee, 0xc6, 0xa6, 0xf1, 0x67, 0x6c,
	0x1a, 0xdf, 0x27, 0x66, 0xee, 0x6e, 0x62, 0xe6, 0x7e, 0x4f, 0xcc, 0xdc, 0xa7, 0xc3, 0x7f, 0x97,
	0xeb, 0x66, 0xe1, 0x76, 0xc1, 0x30, 0xe0, 0x51, 0x27, 0xaf, 0x0f, 0xce, 0x9b, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x28, 0x98, 0xc0, 0xc3, 0xdf, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimRewardPacketSent {
		i--
		if m.ClaimRewardPacketSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.UnLockLiquidityPacketSent {
		i--
		if m.UnLockLiquidityPacketSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LockTokensPacketSent {
		i--
		if m.LockTokensPacketSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.JoinSwapExactAmountInPacketSent {
		i--
		if m.JoinSwapExactAmountInPacketSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.DepositTokenToICAPacketSent {
		i--
		if m.DepositTokenToICAPacketSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.ClaimRewardPacketSend {
		i--
		if m.ClaimRewardPacketSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.UnLockLiquidityPacketSend {
		i--
		if m.UnLockLiquidityPacketSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.LockTokensPacketSend {
		i--
		if m.LockTokensPacketSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.JoinSwapExactAmountInPacketSend {
		i--
		if m.JoinSwapExactAmountInPacketSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DepositTokenToICAPacketSend {
		i--
		if m.DepositTokenToICAPacketSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.IcaConnectionId) > 0 {
		i -= len(m.IcaConnectionId)
		copy(dAtA[i:], m.IcaConnectionId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.IcaConnectionId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DepositLastTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DepositLastTime))
		i--
		dAtA[i] = 0x30
	}
	if m.LockTokenTimestamp != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LockTokenTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LiquidityDenom) > 0 {
		i -= len(m.LiquidityDenom)
		copy(dAtA[i:], m.LiquidityDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LiquidityDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CurrentDepositAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAccount) > 0 {
		i -= len(m.AdminAccount)
		copy(dAtA[i:], m.AdminAccount)
		i = encodeVarintParams(dAtA, i, uint64(len(m.AdminAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAccount)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.CurrentDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.LiquidityDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.LockTokenTimestamp != 0 {
		n += 1 + sovParams(uint64(m.LockTokenTimestamp))
	}
	if m.DepositLastTime != 0 {
		n += 1 + sovParams(uint64(m.DepositLastTime))
	}
	l = len(m.IcaConnectionId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DepositTokenToICAPacketSend {
		n += 2
	}
	if m.JoinSwapExactAmountInPacketSend {
		n += 2
	}
	if m.LockTokensPacketSend {
		n += 2
	}
	if m.UnLockLiquidityPacketSend {
		n += 2
	}
	if m.ClaimRewardPacketSend {
		n += 2
	}
	if m.DepositTokenToICAPacketSent {
		n += 2
	}
	if m.JoinSwapExactAmountInPacketSent {
		n += 2
	}
	if m.LockTokensPacketSent {
		n += 2
	}
	if m.UnLockLiquidityPacketSent {
		n += 3
	}
	if m.ClaimRewardPacketSent {
		n += 3
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTokenTimestamp", wireType)
			}
			m.LockTokenTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTokenTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositLastTime", wireType)
			}
			m.DepositLastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositLastTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTokenToICAPacketSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositTokenToICAPacketSend = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinSwapExactAmountInPacketSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinSwapExactAmountInPacketSend = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTokensPacketSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockTokensPacketSend = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnLockLiquidityPacketSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnLockLiquidityPacketSend = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRewardPacketSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimRewardPacketSend = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTokenToICAPacketSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositTokenToICAPacketSent = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinSwapExactAmountInPacketSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinSwapExactAmountInPacketSent = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTokensPacketSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockTokensPacketSent = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnLockLiquidityPacketSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnLockLiquidityPacketSent = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRewardPacketSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimRewardPacketSent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
