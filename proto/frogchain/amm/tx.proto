syntax = "proto3";

package frogchain.amm;

import "frogchain/amm/pool_param.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "frogchain/x/amm/types";

// Msg defines the Msg service.
service Msg {
  rpc CreatePool               (MsgCreatePool              ) returns (MsgCreatePoolResponse              );
  rpc AddLiquidity             (MsgAddLiquidity            ) returns (MsgAddLiquidityResponse            );
  rpc RemoveLiquidity          (MsgRemoveLiquidity         ) returns (MsgRemoveLiquidityResponse         );
  rpc SwapExactTokensForTokens (MsgSwapExactTokensForTokens) returns (MsgSwapExactTokensForTokensResponse);
  rpc SwapTokensForExactTokens (MsgSwapTokensForExactTokens) returns (MsgSwapTokensForExactTokensResponse);
}

message MsgCreatePool {
           string                   creator      = 1;
           PoolParam                poolParam    = 2;
  repeated cosmos.base.v1beta1.Coin poolAssets   = 3 [(gogoproto.nullable) = false];
  // assetAmounts : amounts for sending assets to pool
  repeated string                   assetWeights = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgCreatePoolResponse {
  uint64 id = 1;
}

message MsgAddLiquidity {
           string creator        = 1;
           uint64 poolId         = 2;
  repeated string desiredAmounts = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated string minAmounts     = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgAddLiquidityResponse {
  cosmos.base.v1beta1.Coin shareToken = 1 [(gogoproto.nullable) = false];
}

message MsgRemoveLiquidity {
           string creator       = 1;
           uint64 poolId        = 2;
           string liquidity     = 3 [
            (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
            (gogoproto.nullable) = false
           ];
  repeated string minAmounts    = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgRemoveLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin receivedTokens = 1 [(gogoproto.nullable) = false];
}

// SwapExactTokensForTokens message is for providing exact tokens to get tokens
message MsgSwapExactTokensForTokens {
           string                    creator      = 1;
           uint64                    poolId       = 2;
           string                    amountIn     = 3 [
            (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
            (gogoproto.nullable) = false
           ];
           string                    amountOutMin = 4 [
            (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
            (gogoproto.nullable) = false
           ];
  repeated string                    path         = 5 [(gogoproto.nullable) = false];
           string                    to           = 6;
           google.protobuf.Timestamp deadline     = 7 [
             (gogoproto.nullable) = false,
             (gogoproto.stdtime) = true
           ];
}

message MsgSwapExactTokensForTokensResponse {
  uint64 amountOut = 1;
}

// SwapExactTokensForTokens message is for providing tokens to get exact tokens
message MsgSwapTokensForExactTokens {
           string                    creator   = 1;
           uint64                    poolId    = 2;
           string                    amountOut = 3 [
            (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
            (gogoproto.nullable) = false
           ];
  repeated string                    path      = 4 [(gogoproto.nullable) = false];
           string                    to        = 5;
           google.protobuf.Timestamp deadline  = 6 [
             (gogoproto.nullable) = false,
             (gogoproto.stdtime) = true
           ];
}

message MsgSwapTokensForExactTokensResponse {
  uint64 amountIn = 1;
}

